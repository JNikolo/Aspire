generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String   @id @default(uuid())
  authId         String   @unique
  profilePicture String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  profileName    String?
  Habit          Habit[]
}

model Habit {
  id            Int     @id @default(autoincrement()) // Unique habit ID
  habitName     String // The name of the habit
  notifications Boolean // Whether notifications are enabled
  userId        String // Foreign key to User
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // One-to-many relation with HabitSelectedDays
  selectedDays HabitSelectedDay[]

  // One-to-many relation with HabitFrequency (days of the week for frequency)
  frequency HabitFrequency[]
  HabitLogs HabitLog[]

  // Unique constraint to ensure habit name is unique for each user
  @@unique([habitName, userId])
}

// HabitSelectedDays table (storing days selected for the habit)
model HabitSelectedDay {
  id        Int      @id @default(autoincrement())
  habitId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dayOfWeek String
  habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
}

model HabitFrequency {
  id        Int    @id @default(autoincrement())
  dayOfWeek String // Day of the week (e.g., 'Monday', 'Tuesday')
  habitId   Int // Foreign key to Habit

  habit Habit @relation(fields: [habitId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// HabitProgress table (storing habit progress for each day)
model HabitLog {
  id          Int        @id @default(autoincrement())
  habitId     Int
  habit       Habit      @relation(fields: [habitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  communityId Int?
  community   Community? @relation(fields: [communityId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  title       String
  description String?
  picture     String?
  logDate     DateTime
  isPublic    Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([habitId, logDate]) // Ensure unique progress entry for each habit and date
}

model Community {
  id        Int        @id @default(autoincrement())
  name      String
  logs      HabitLog[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}
