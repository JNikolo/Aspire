// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String   @id @default(uuid())
  authId         String   @unique
  profileName    String?
  profilePicture String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  Habit          Habit[]
}

// Habits table
model Habit {
  id            Int     @id @default(autoincrement()) // Unique habit ID
  habitName     String // The name of the habit
  notifications Boolean // Whether notifications are enabled
  userId        String // Foreign key to User
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // One-to-many relation with HabitSelectedDays
  selectedDays HabitSelectedDay[]

  // One-to-many relation with HabitFrequency (days of the week for frequency)
  frequency     HabitFrequency[]
  HabitProgress HabitProgress[]

  // Unique constraint to ensure habit name is unique for each user
  @@unique([habitName, userId])
}

// HabitSelectedDays table (storing days selected for the habit)
model HabitSelectedDay {
  id        Int    @id @default(autoincrement())
  dayOfWeek String // Day of the week (e.g., 'Monday', 'Tuesday')
  habitId   Int // Foreign key to Habit

  habit Habit @relation(fields: [habitId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// HabitFrequency table (storing frequency days for the habit)
model HabitFrequency {
  id        Int    @id @default(autoincrement())
  dayOfWeek String // Day of the week (e.g., 'Monday', 'Tuesday')
  habitId   Int // Foreign key to Habit

  habit Habit @relation(fields: [habitId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// HabitProgress table (storing habit progress for each day)
model HabitProgress {
  id      Int   @id @default(autoincrement())
  habitId Int
  habit   Habit @relation(fields: [habitId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  progressDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([habitId, progressDate]) // Ensure unique progress entry for each habit and date
}
