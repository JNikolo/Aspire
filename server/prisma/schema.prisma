generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String   @id @default(uuid())
  authId         String   @unique
  profilePicture String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  profileName    String?
  Habit          Habit[]
}

model Habit {
  id            Int                @id @default(autoincrement())
  habitName     String
  notifications Boolean
  userId        String
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @default(now()) @updatedAt
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  frequency     HabitFrequency[]
  HabitLogs     HabitLog[]
  selectedDays  HabitSelectedDay[]

  @@unique([habitName, userId])
}

model HabitSelectedDay {
  id        Int      @id @default(autoincrement())
  habitId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dayOfWeek String
  habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
}

model HabitFrequency {
  id        Int      @id @default(autoincrement())
  habitId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dayOfWeek String
  habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
}

model HabitLog {
  id          Int        @id @default(autoincrement())
  habitId     Int
  communityId Int?
  title       String
  description String?
  picture     String?
  logDate     DateTime
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isPublic    Boolean
  community   Community? @relation(fields: [communityId], references: [id])
  habit       Habit      @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@unique([habitId, logDate])
}

model Community {
  id        Int        @id @default(autoincrement())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  logs      HabitLog[]
}
